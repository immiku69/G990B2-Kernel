name: Build Kernel with Clang

on:
  push:
    branches: [main, master]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ARCH: arm64
      SUBARCH: arm64
      OUTPUT_DIR: ${{ github.workspace }}/out
      CLANG_DIR: ${{ github.workspace }}/toolchains/neutron-clang
      CLANG_BIN: ${{ github.workspace }}/toolchains/neutron-clang/bin
      CROSS_COMPILE: aarch64-linux-gnu-

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Setup prerequisites
      run: |
        sudo apt-get update
        export SRC_DIR=$(pwd)
        mkdir -p "$CLANG_DIR"
        cd "$CLANG_DIR"
        curl -LO "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman"
        chmod +x antman
        ./antman -S
        cd "$SRC_DIR"
        sudo apt-get install -y \
          build-essential bc bison flex git curl zip unzip cpio python3 python3-pip \
          libncurses5-dev libssl-dev wget libelf-dev fakeroot gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu

    - name: Create output directory
      run: mkdir -p $OUTPUT_DIR

    - name: Generate kernel config
      run: |
        export PATH=$CLANG_BIN:$PATH
        make -C ${{ github.workspace }} O=$OUTPUT_DIR \
          ARCH=$ARCH \
          CROSS_COMPILE=$CROSS_COMPILE \
          CC=clang \
          vendor/r9q_eur_openx2_defconfig

    - name: Build kernel
      run: |
        export PATH=$CLANG_BIN:$PATH
        export CC=clang
        export KCFLAGS="-Wno-error"
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export CROSS_COMPILE=$CROSS_COMPILE
        KERNEL_MAKE_ENV="DTC_EXT=$(pwd)/tools/dtc CONFIG_BUILD_ARM64_DT_OVERLAY=y"
        make -j$(nproc) -C $(pwd) O=$OUTPUT_DIR $KERNEL_MAKE_ENV ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE

    - name: Upload kernel Image artifact
      uses: actions/upload-artifact@v4
      with:
        name: kernel-image
        path: ${{ env.OUTPUT_DIR }}/arch/arm64/boot/Image

