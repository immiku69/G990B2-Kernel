name: Build Kernel with Clang

on:
  push:
    branches: [main, master]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ARCH: arm64
      SUBARCH: arm64
      OUTPUT_DIR: ${{ github.workspace }}/out
      CLANG_DIR: ${{ github.workspace }}/toolchain/llvm-toolchain
      CLANG_BIN: ${{ github.workspace }}/toolchain/llvm-toolchain/bin
      CROSS_COMPILE: aarch64-linux-gnu-

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Setup prerequisites
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential bc bison flex git curl zip unzip cpio python3 python3-pip \
          libncurses5-dev libssl-dev wget libelf-dev fakeroot gcc-aarch64-linux-gnu

    - name: Download Clang toolchain
      run: |
        mkdir -p toolchain
        cd toolchain
        curl -LO https://github.com/ClangBuiltLinux/tc-build/releases/download/2024.05.17/clang+llvm-18.1.4-x86_64-linux-gnu.tar.xz
        tar -xf clang+llvm-18.1.4-x86_64-linux-gnu.tar.xz
        mv clang+llvm-18.1.4-x86_64-linux-gnu llvm-toolchain

    - name: Create output directory
      run: mkdir -p $OUTPUT_DIR

    - name: Generate kernel config
      run: |
        make -C ${{ github.workspace }} O=$OUTPUT_DIR \
          ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE \
          CC=${CLANG_BIN}/clang \
          vendor/r9q_eur_openx2_defconfig

    - name: Build kernel with Clang and verbose logging
      run: |
        DTC_EXT=${{ github.workspace }}/tools/dtc
        make -j$(nproc) V=1 -C ${{ github.workspace }} O=$OUTPUT_DIR \
          ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE \
          CC=${CLANG_BIN}/clang \
          DTC_EXT=$DTC_EXT CONFIG_BUILD_ARM64_DT_OVERLAY=y 2>&1 | tee $OUTPUT_DIR/build.log

    - name: Upload kernel Image artifact
      uses: actions/upload-artifact@v4
      with:
        name: kernel-image
        path: ${{ env.OUTPUT_DIR }}/arch/arm64/boot/Image

    - name: Upload build log on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-log
        path: ${{ env.OUTPUT_DIR }}/build.log

